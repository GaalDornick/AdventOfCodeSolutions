module Main where

import Data.Array (range)
import Data.Char (digitToInt)
import qualified Data.Map as Map
import Data.Maybe (fromJust, maybeToList)
import Debug.Trace (trace)
import Data.List(sort)

traceCall :: Show a => a -> a
traceCall a = trace(show(a)) a

flatMap :: ( b -> [a]) -> [b] -> [a]
flatMap mapFunc input = foldl (++) [] (map mapFunc input)

type Point = (Int, Int)

type Grid k = Map.Map Point k
grid :: [k] -> Point -> Grid k
grid elems (width, height) = let start = (0,0)
                                 end =  (width-1, height-1)
                                 coords = range(start, end)
                                 points = map(\(x, y) -> ((x, y), elems !! (y*width+x))) coords
                             in Map.fromList(points)

elemRender :: Show k => Grid k->Int->Int->String
elemRender grid y x = show(gridElemAt grid (x,y))

lineRender :: Show k => Grid k -> [Int] -> Int -> String
lineRender grid xRange y = foldl (++) "" (map(elemRender grid y) xRange)

renderGrid :: Show k => Grid k -> String
renderGrid grid 
    | Map.null grid = "EMPTY"
    | otherwise = let coords = Map.keys grid
                      maxX = maximum(map fst coords)
                      maxY = maximum(map snd coords)
                      xRange = range(0, maxX)
                      yRange = range(0, maxY)
                   in foldl (\a b -> a ++ "\n" ++ b) "" (map (lineRender grid xRange) yRange)


gridElemAt :: Grid k -> Point-> [k]
gridElemAt elems coord = maybeToList(Map.lookup coord elems)


neighborCoords :: Point ->  [Point]
neighborCoords (x, y)  = let left    = [(x-1  , y)] 
                             top     = [(x    , y-1)]
                             right   = [(x+1  , y)]
                             bottom  = [(x    , y+1)]
                          in left ++ top ++ right ++ bottom


neighbors :: Point -> Grid k -> [k]
neighbors point grid = let coords = neighborCoords point
                       in flatMap (gridElemAt(grid)) coords

allCoords:: Grid k -> [(Point)]
allCoords elems = Map.keys elems

input :: Grid Char
-- input =  grid "21999432103987894921985678989287678967899899965678" (10,5)
input = grid

isLowPoint :: (Char, String) -> Bool
isLowPoint (elem, neighbors) = length (filter (<=elem) neighbors) == 0


findBasins :: Grid Char -> [[Point]]
findBasins grid 
    | Map.null grid = [] -- grid is empty.. so stop here
    | otherwise     = let firstPoint = head(Map.keys grid)
                          (basinAtPoint, remainingGrid) = findBasinAtPoint grid firstPoint
                      in basinAtPoint:findBasins(remainingGrid)
                    
                    
findBasinAtPoint :: Grid Char -> Point -> ([Point], Grid Char)
findBasinAtPoint grid point = let elemAtPoint = trace(show(point))(gridElemAt grid point)
                                  gridWithoutPoint = Map.delete point grid
                              in case elemAtPoint of []     -> ([], grid) -- nothing here stop recursion
                                                     ['9']    -> ([], gridWithoutPoint) -- basin wall remove aand stop recursion
                                                     [elem] -> let candidates = neighborCoords point 
                                                                   (candidateBasin, remainingGrid) = findBasinAtMultiplePoint gridWithoutPoint candidates
                                                               in (point:candidateBasin, remainingGrid)

findBasinAtMultiplePoint :: Grid Char -> [Point] -> ([Point], Grid Char)
findBasinAtMultiplePoint grid points = foldl (\(accPoints, accGrid) curr -> let (foundBasin, remainingGrid) = findBasinAtPoint accGrid curr 
                                                                    in (accPoints ++ foundBasin, remainingGrid)
                                             ) ([], grid) points
                                                  

main :: IO ()
main = do
    putStrLn(show(input))
    let coords = allCoords input
    let elemsWithNeighbors = map (\point -> (head(gridElemAt(input)(point)), neighbors(point)(input))) coords
    putStrLn(show(elemsWithNeighbors))
    let lowPoints = map(fst)(filter(isLowPoint) elemsWithNeighbors)
    putStrLn(show(lowPoints))
    let riskScores = map(\c -> digitToInt(c) + 1) lowPoints
    putStrLn(show(sum(riskScores)))
    let basins = findBasins input
    putStrLn(show(basins))
    let basinSizes = reverse(sort(map (length) basins))
    putStrLn(show basinSizes)
    let result = foldl (*) 1 (take 3 basinSizes)
    putStrLn(show result)

