"use strict";
let puzzles = [
    [
        'addx 15',
        'addx -11',
        'addx 6',
        'addx -3',
        'addx 5',
        'addx -1',
        'addx -8',
        'addx 13',
        'addx 4',
        'noop',
        'addx -1',
        'addx 5',
        'addx -1',
        'addx 5',
        'addx -1',
        'addx 5',
        'addx -1',
        'addx 5',
        'addx -1',
        'addx -35',
        'addx 1',
        'addx 24',
        'addx -19',
        'addx 1',
        'addx 16',
        'addx -11',
        'noop',
        'noop',
        'addx 21',
        'addx -15',
        'noop',
        'noop',
        'addx -3',
        'addx 9',
        'addx 1',
        'addx -3',
        'addx 8',
        'addx 1',
        'addx 5',
        'noop',
        'noop',
        'noop',
        'noop',
        'noop',
        'addx -36',
        'noop',
        'addx 1',
        'addx 7',
        'noop',
        'noop',
        'noop',
        'addx 2',
        'addx 6',
        'noop',
        'noop',
        'noop',
        'noop',
        'noop',
        'addx 1',
        'noop',
        'noop',
        'addx 7',
        'addx 1',
        'noop',
        'addx -13',
        'addx 13',
        'addx 7',
        'noop',
        'addx 1',
        'addx -33',
        'noop',
        'noop',
        'noop',
        'addx 2',
        'noop',
        'noop',
        'noop',
        'addx 8',
        'noop',
        'addx -1',
        'addx 2',
        'addx 1',
        'noop',
        'addx 17',
        'addx -9',
        'addx 1',
        'addx 1',
        'addx -3',
        'addx 11',
        'noop',
        'noop',
        'addx 1',
        'noop',
        'addx 1',
        'noop',
        'noop',
        'addx -13',
        'addx -19',
        'addx 1',
        'addx 3',
        'addx 26',
        'addx -30',
        'addx 12',
        'addx -1',
        'addx 3',
        'addx 1',
        'noop',
        'noop',
        'noop',
        'addx -9',
        'addx 18',
        'addx 1',
        'addx 2',
        'noop',
        'noop',
        'addx 9',
        'noop',
        'noop',
        'noop',
        'addx -1',
        'addx 2',
        'addx -37',
        'addx 1',
        'addx 3',
        'noop',
        'addx 15',
        'addx -21',
        'addx 22',
        'addx -6',
        'addx 1',
        'noop',
        'addx 2',
        'addx 1',
        'noop',
        'addx -10',
        'noop',
        'noop',
        'addx 20',
        'addx 1',
        'addx 2',
        'addx 2',
        'addx -6',
        'addx -11',
        'noop',
        'noop',
        'noop',
    ],
    [
        'noop',
        'noop',
        'noop',
        'addx 6',
        'noop',
        'addx 30',
        'addx -26',
        'noop',
        'addx 5',
        'noop',
        'noop',
        'noop',
        'noop',
        'addx 5',
        'addx -5',
        'addx 6',
        'addx 5',
        'addx -1',
        'addx 5',
        'noop',
        'noop',
        'addx -14',
        'addx -18',
        'addx 39',
        'addx -39',
        'addx 25',
        'addx -22',
        'addx 2',
        'addx 5',
        'addx 2',
        'addx 3',
        'addx -2',
        'addx 2',
        'noop',
        'addx 3',
        'addx 2',
        'addx 2',
        'noop',
        'addx 3',
        'noop',
        'addx 3',
        'addx 2',
        'addx 5',
        'addx 4',
        'addx -18',
        'addx 17',
        'addx -38',
        'addx 5',
        'addx 2',
        'addx -5',
        'addx 27',
        'addx -19',
        'noop',
        'addx 3',
        'addx 4',
        'noop',
        'noop',
        'addx 5',
        'addx -1',
        'noop',
        'noop',
        'addx 4',
        'addx 5',
        'addx 2',
        'addx -4',
        'addx 5',
        'noop',
        'addx -11',
        'addx 16',
        'addx -36',
        'noop',
        'addx 5',
        'noop',
        'addx 28',
        'addx -23',
        'noop',
        'noop',
        'noop',
        'addx 21',
        'addx -18',
        'noop',
        'addx 3',
        'addx 2',
        'addx 2',
        'addx 5',
        'addx 1',
        'noop',
        'noop',
        'addx 4',
        'noop',
        'noop',
        'noop',
        'noop',
        'noop',
        'addx 8',
        'addx -40',
        'noop',
        'addx 7',
        'noop',
        'addx -2',
        'addx 5',
        'addx 2',
        'addx 25',
        'addx -31',
        'addx 9',
        'addx 5',
        'addx 2',
        'addx 2',
        'addx 3',
        'addx -2',
        'noop',
        'addx 3',
        'addx 2',
        'noop',
        'addx 7',
        'addx -2',
        'addx 5',
        'addx -40',
        'addx 20',
        'addx -12',
        'noop',
        'noop',
        'noop',
        'addx -5',
        'addx 7',
        'addx 7',
        'noop',
        'addx -1',
        'addx 1',
        'addx 5',
        'addx 3',
        'addx -2',
        'addx 2',
        'noop',
        'addx 3',
        'addx 2',
        'noop',
        'noop',
        'noop',
        'noop',
        'addx 7',
        'noop',
        'noop',
        'noop',
        'noop',
    ]
];
const convert = (instr) => {
    if (instr == 'noop') {
        return [[instr, 0]];
    }
    else {
        return [['add-noop', 0], [instr, +instr.split(' ')[1]]];
    }
};
const flatten = (acc, next) => {
    acc.push(...next);
    return acc;
};
const computeX = (acc, next) => {
    var _a;
    const curr = ((_a = acc[acc.length - 1]) !== null && _a !== void 0 ? _a : ['', 1])[1];
    acc.push([next[0], next[1] + curr]);
    return acc;
};
puzzles.forEach(instructions => {
    const Xs = instructions.map(convert).reduce(flatten, []).reduce(computeX, []);
    const cycleXs = Array.from({ length: 240 }).map((v, i) => i < 1 ? 1 : Xs[i - 1][1]);
    const signalStrengths = [20, 60, 100, 140, 180, 220];
    console.log(signalStrengths.map(i => i + '*' + cycleXs[i]));
    console.log(signalStrengths.map(i => i * cycleXs[i]));
    console.log(signalStrengths.map(i => i * cycleXs[i]).reduce((acc, n) => acc + n, 0));
    console.log(cycleXs);
    for (let row = 0; row < 6; row++) {
        let line = '';
        for (let col = 0; col < 40; col++) {
            const cellNum = row * 40 + col;
            const X = cycleXs[cellNum];
            const next = (col >= X - 1 && col <= X + 1) ? '#' : '.';
            line = line + next;
        }
        console.log(line);
    }
});
